#!/usr/bin/env bash

install_kibana() {
  local install_type=$1
  local version=$2
  local install_path=$3

  if [ "$(uname)" = "Darwin" ]; then
    version=$version-darwin-x86_64
  else
    version=$version-linux-x86_64
  fi

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir=$(mktemp -d)
  else
    local tmp_download_dir=$TMPDIR
  fi

  local source_path=$(get_download_file_path $install_type $version $tmp_download_dir)
  download_source $install_type $version $source_path

  # running this in a subshell
  # because we don't want to disturb current working dir
  (
    cd $(dirname $source_path)
    tar zxf $source_path || exit 1
    cd $(untar_path $install_type $version $tmp_download_dir)


    # Remove windows related files
    find . -name "*.exe" -print0 | xargs -0 rm
    find . -name "*.bat" -print0 | xargs -0 rm

    mv ./* $ASDF_INSTALL_PATH || exit 1
  )
}


untar_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3

  if [ "$install_type" = "version" ]
  then
    echo "$tmp_download_dir/kibana-${version}"
  else
    echo "$tmp_download_dir/kibana-${version}"
  fi
}

download_source() {
  local install_type=$1
  local version=$2
  local download_path=$3
  local download_url=$(get_download_url $install_type $version)

  echo Installing kibana from $download_url
  curl -sLo $download_path -C - $download_url
}

get_download_file_path() {
  local install_type=$1
  local version=$2
  local tmp_download_dir=$3
  local pkg_name="kibana-${version}.tar.gz"

  echo "$tmp_download_dir/$pkg_name"
}

function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }

get_download_url() {
  local install_type=$1
  local version=$2
  if [ $(version $version) -gt $(version "2.4.6") ]; then
    echo "https://artifacts.elastic.co/downloads/kibana/kibana-$version.tar.gz"
  else
    echo "https://download.elastic.co/kibana/kibana/kibana-$version.tar.gz"
  fi
}

install_kibana $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
